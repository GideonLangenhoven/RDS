{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/RDS/src/pages/Services.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ServiceCard from '../components/ServiceCard';\nimport ServiceDetailModal from '../components/ServiceDetailModal';\nimport { services } from '../data/servicesData';\nimport '../styles/Services.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Services = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedService, setSelectedService] = useState(null);\n  // NEW: This state now centrally controls which card is \"clicked\" or \"active\".\n  const [activeCardId, setActiveCardId] = useState(null);\n\n  // This function now toggles the active card state.\n  const handleCardClick = cardId => {\n    setActiveCardId(prevId => prevId === cardId ? null : cardId);\n  };\n  const handleOpenModal = service => {\n    // When opening the modal, ensure the card that was clicked is set as active.\n    setActiveCardId(service.id);\n    setSelectedService(service);\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    // **CRITICAL FIX**: This now also clears the active card, ensuring a full reset.\n    setActiveCardId(null);\n  };\n  useEffect(() => {\n    if (isModalOpen) {\n      document.body.classList.add('modal-open');\n    } else {\n      document.body.classList.remove('modal-open');\n    }\n  }, [isModalOpen]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Our Event Planning Services\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"services-grid\",\n          children: services.map(service => /*#__PURE__*/_jsxDEV(ServiceCard, {\n            service: service,\n            onOpenModal: handleOpenModal,\n            onCardClick: handleCardClick\n            // The card is active if its ID matches the centrally managed ID.\n            ,\n            isActive: activeCardId === service.id\n          }, service.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ServiceDetailModal, {\n      service: selectedService,\n      onClose: handleCloseModal,\n      isOpen: isModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Services, \"hbZIs6gZkA677rjqIuBpwXappms=\");\n_c = Services;\nexport default Services;\nvar _c;\n$RefreshReg$(_c, \"Services\");","map":{"version":3,"names":["React","useState","useEffect","ServiceCard","ServiceDetailModal","services","jsxDEV","_jsxDEV","Fragment","_Fragment","Services","_s","isModalOpen","setIsModalOpen","selectedService","setSelectedService","activeCardId","setActiveCardId","handleCardClick","cardId","prevId","handleOpenModal","service","id","handleCloseModal","document","body","classList","add","remove","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","onOpenModal","onCardClick","isActive","onClose","isOpen","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/RDS/src/pages/Services.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ServiceCard from '../components/ServiceCard';\nimport ServiceDetailModal from '../components/ServiceDetailModal';\nimport { services } from '../data/servicesData';\nimport '../styles/Services.css';\n\nconst Services = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedService, setSelectedService] = useState(null);\n  // NEW: This state now centrally controls which card is \"clicked\" or \"active\".\n  const [activeCardId, setActiveCardId] = useState(null);\n\n  // This function now toggles the active card state.\n  const handleCardClick = (cardId) => {\n    setActiveCardId(prevId => (prevId === cardId ? null : cardId));\n  };\n\n  const handleOpenModal = (service) => {\n    // When opening the modal, ensure the card that was clicked is set as active.\n    setActiveCardId(service.id);\n    setSelectedService(service);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    // **CRITICAL FIX**: This now also clears the active card, ensuring a full reset.\n    setActiveCardId(null);\n  };\n\n  useEffect(() => {\n    if (isModalOpen) {\n      document.body.classList.add('modal-open');\n    } else {\n      document.body.classList.remove('modal-open');\n    }\n  }, [isModalOpen]);\n\n  return (\n    <>\n      <div className=\"page-container\">\n        <div className=\"page-content\">\n          <h1>Our Event Planning Services</h1>\n          <div className=\"services-grid\">\n            {services.map(service => (\n              <ServiceCard\n                key={service.id}\n                service={service}\n                onOpenModal={handleOpenModal}\n                onCardClick={handleCardClick}\n                // The card is active if its ID matches the centrally managed ID.\n                isActive={activeCardId === service.id}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      <ServiceDetailModal\n        service={selectedService}\n        onClose={handleCloseModal}\n        isOpen={isModalOpen}\n      />\n    </>\n  );\n};\n\nexport default Services;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}